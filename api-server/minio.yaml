---
# Source: testkube/charts/testkube-api/templates/minio.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  # This name uniquely identifies the PVC. This is used in deployment.
  name: testkube-minio-pv-claim-default
spec:
  accessModes:
  - "ReadWriteOnce"
  resources:
    requests:
      storage: 10Gi
---
# Source: testkube/charts/testkube-api/templates/minio.yaml
apiVersion: v1
kind: Service
metadata:
  # This name uniquely identifies the service
  name: testkube-minio-service-default
  labels:
spec:
  type: ClusterIP
  ports:
    - name: http
      port: 9000
      protocol: TCP
    - name: web
      port: 9090
      protocol: TCP
    - name: https
      port: 9443
      protocol: TCP
  selector:
    # Looks for labels `app:minio` in the namespace and applies the spec
    app: testkube-minio-default
---
# Source: testkube/charts/testkube-api/templates/minio.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  # This name uniquely identifies the Deployment
  name: testkube-minio-default
  labels:
spec:
  replicas: 1
  selector:
    matchLabels:
      app: testkube-minio-default # has to match .spec.template.metadata.labels
  strategy:
    # Specifies the strategy used to replace old Pods by new ones
    # Refer: https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#strategy
    type: Recreate
  template:
    metadata:
      labels:
      # This label is used as a selector in Service definition
        app: testkube-minio-default
    spec:
      
      # Volumes used by this deployment
      volumes:
        - name: data
          # This volume is based on PVC
          persistentVolumeClaim:
            # Name of the PVC created earlier
            claimName: testkube-minio-pv-claim-default
      containers:
        - name: testkube-minio
          # Volume mounts for this container
          volumeMounts:
            # Volume 'data' is mounted to path '/data'
            - name: data
              mountPath: "/data"
          # Pulls the lastest Minio image from Docker Hub
          image: docker.io/minio/minio:latest
          imagePullPolicy: IfNotPresent
          args:
            - server
            - /data
            - --console-address
            - ":9090"
          env:
            # MinIO access key and secret key
            - name: MINIO_ROOT_USER
              value: minio
            - name: MINIO_ROOT_PASSWORD
              value: minio123
            - name: CONSOLE_PORT
              value: "9090"
            - name: CONSOLE_TLS_PORT
              value: "9443"
          ports:
            - containerPort: 9000
              name: http
            - containerPort: 9090
              name: web
            - containerPort: 9443
              name: https
          # Readiness probe detects situations when MinIO server instance
          # is not ready to accept traffic. Kubernetes doesn't forward
          # traffic to the pod while readiness checks fail.
          readinessProbe:
            httpGet:
              path: /minio/health/ready
              port: 9000
            initialDelaySeconds: 3
            periodSeconds: 10
          # Liveness probe detects situations where MinIO server instance
          # is not working properly and needs restart. Kubernetes automatically
          # restarts the pods if liveness checks fail.
          livenessProbe:
            httpGet:
              path: /minio/health/live
              port: 9000
            initialDelaySeconds: 3
            periodSeconds: 10
          securityContext:
            {}
      securityContext:
        {}
      tolerations:
        - effect: NoSchedule
          key: kubernetes.io/arch
          operator: Equal
          value: arm64
